[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://d3hun8tn3s2ne"]

[sub_resource type="Shader" id="1"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	//samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	//samp+= texture(p_sampler, p_triplanar_pos.xz);
	samp+= texture(p_sampler, p_triplanar_pos.zy);
	//samp += texture(p_sampler, p_triplanar_pos.xy);
	//samp+= texture(p_sampler,p_triplanar_pos.xz * vec2(1.0, -1.0)) * p_weights.y;
	//samp+= texture(p_sampler,p_triplanar_pos.zy) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="Gradient" id="2"]
offsets = PackedFloat32Array(0, 0.0566802, 0.947368, 0.951417)
colors = PackedColorArray(0.164706, 0, 1, 1, 0, 0.654902, 1, 1, 0, 0.631373, 1, 1, 0.14902, 0.0431373, 0.976471, 1)

[sub_resource type="GradientTexture1D" id="3"]
gradient = SubResource( "2" )

[resource]
render_priority = 0
shader = SubResource( "1" )
shader_param/albedo = Color(1, 1, 1, 1)
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3(2, 2, 1)
shader_param/uv1_offset = Vector3(0, 0, 0)
shader_param/uv2_scale = Vector3(1, 1, 1)
shader_param/uv2_offset = Vector3(0, 0, 0)
shader_param/texture_albedo = SubResource( "3" )
