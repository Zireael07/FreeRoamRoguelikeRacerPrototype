[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://c5qul5sib2dvw"]

[sub_resource type="Shader" id="Shader_8hmrt"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=vec2(UV.y, UV.x);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[resource]
render_priority = 0
shader = SubResource( "Shader_8hmrt" )
shader_param/albedo = Color(1, 1, 1, 1)
shader_param/metallic = null
shader_param/metallic_texture_channel = null
shader_param/point_size = null
shader_param/roughness = null
shader_param/roughness_texture_channel = null
shader_param/specular = null
shader_param/uv1_offset = null
shader_param/uv1_scale = null
shader_param/uv2_offset = null
shader_param/uv2_scale = null
