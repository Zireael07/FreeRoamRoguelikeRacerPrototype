[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]

code = "shader_type spatial;

render_mode unshaded;

uniform float cut_off = 0.1;
uniform float cloud_cover: hint_range(10.0,100.0); //how much of the sky is covered?
uniform bool move;

uniform vec3 light; 

// influence
uniform float ha_divider = 758.5453; // default: 758.5453

float ha( float n ) {return fract(sin(n)*ha_divider);}

float no( in vec3 x ) {
	vec3 p = floor(x);    vec3 f = fract(x); 
    float n = p.x + p.y*57.0 + p.z*800.0;float res = mix(mix(mix( ha(n+  0.0), ha(n+  1.0),f.x), mix( ha(n+ 57.0), ha(n+ 58.0),f.x),f.y),
    mix(mix( ha(n+800.0), ha(n+801.0),f.x), mix( ha(n+857.0), ha(n+858.0),f.x),f.y),f.z);
    return res;
}

float fbm( vec3 p ){
	float f = 0.0;
	//float full_cover = 0.984375;
	float full_cover = 1.3;
	
	//float f = 0.3*cos(TIME*0.03);
    f += 0.50000*no( p ); p = p*2.02;    f -= 0.25000*no( p ); p = p*2.03;
    f += 0.12500*no( p ); p = p*2.01;    f += 0.06250*no( p ); p = p*2.04;
    f -= 0.03125*no( p );    
	//return f/(cloud_cover*full_cover);
	return f/((cloud_cover/100.0)*full_cover);
}

float cloud(vec3 p)
{	p-=fbm(vec3(p.x,p.y,0.0)*0.27)*2.27;float a =0.0;	a-=fbm(p*3.0)*2.2-1.1;
	if (a<0.0) a=0.0;a=a*a;	return a;}

void fragment(){
	vec2 position = (vec2(1) - UV);
	position.y += 0.2;
	vec2 coord = vec2((position.x-0.5)/position.y,1.0/(position.y+0.2));
	if (move)
		coord+=TIME*0.027+1000.0;
	
	float q = cloud(vec3(coord*1.0,0.222));
	vec3 sky = vec3(0.05,0.45,0.95);
	vec3 cloud_col = vec3(q*0.2,q*0.4,q*0.1);
	
	vec3 col = sky + cloud_col;
	
	// get whiter clouds than the original
	vec3 cloud_white = vec3(q*1.0, q*1.0, q*1.0); 
	
	float a = 1.0;
	
	if (q < cut_off)
		//a = 1.0;
		col = sky;
	else
		//a = 1.0;
		col = cloud_white*light;
		
	ALBEDO.rgb = vec3(col);
		
	//set alpha depending on value of albedo
	//if ((ALBEDO.r > sky.r) && (ALBEDO.g > sky.g) && (ALBEDO.b > sky.b))
	
	// set alpha depending on cloud_col
	//if ((cloud_col.r > 0.15) && (cloud_col.g > 0.0) && (cloud_col.b > 0.0))
	if (q > cut_off)
	//if (cloud_col.r > r_cut)
		a = 1.0;
	else
		a = 0.0;
		
	ALPHA = a;
}
"

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/cut_off = 0.15
shader_param/cloud_cover = 30.0
shader_param/move = true
shader_param/light = Vector3( 1, 1, 1 )
shader_param/ha_divider = 758.0
_sections_unfolded = [ "shader_param" ]

