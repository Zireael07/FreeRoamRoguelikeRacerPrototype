[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bxcmra3br5t4e"]

[sub_resource type="Shader" id="1"]
code = "//based on https://www.shadertoy.com/view/4tdSWr

shader_type spatial;

render_mode unshaded;

uniform float cloudscale = 0.1;
uniform float speed = 0.001;
uniform float clouddark = 0.5;
uniform float cloudlight = 0.3;
uniform float cloudcover = 0.2;
uniform float cloudalpha = 8.0;
uniform float skytint = 0.5;

//plug sky color
uniform vec3 skycolour = vec3(0.2, 0.4, 0.6);
uniform float cut_off = 0.1;

uniform mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6) );

vec2 hash( vec2 p ) {
	p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    float K1 = 0.366025404; // (sqrt(3)-1)/2;
    float K2 = 0.211324865; // (3-sqrt(3))/6;
	vec2 i = floor(p + (p.x+p.y)*K1);	
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));	
}

float fbm(vec2 n) {
	float total = 0.0, amplitude = 0.1;
	for (int i = 0; i < 7; i++) {
		total += noise(n) * amplitude;
		n = m * n;
		amplitude *= 0.4;
	}
	return total;
}

// -----------------------------------------------

void vertex() {
	UV = UV*vec2(6.0, 6.0);
	//UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	// from my other cloud shader
	vec2 position = (vec2(1) - UV);
	//position.y += 0.2;
	vec2 coord = UV;
	//vec2 coord = vec2((position.x)/position.y, 1.0);
	//vec2 coord = vec2((position.x-0.5)/position.y,1.0/(position.y+0.2));
	//coord+=TIME*0.027+1000.0;

//	vec2 res = vec2(1024, 760);
//    vec2 p = UV.xy / res;
//	vec2 uv = p*vec2(res.x/res.y,1.0);    
    float time = TIME * speed;

    float q = fbm(coord * cloudscale * 0.5);
    
    //ridged noise shape
	float r = 0.0;
	coord *= cloudscale;
    coord -= q - time;
    float weight = 0.8;
    for (int i=0; i<8; i++){
		r += abs(weight*noise( coord ));
        coord = m*coord + time;
		weight *= 0.7;
    }
    
    //noise shape
	float f = 0.0;
    //uv = p*vec2(res.x/res.y,1.0);
	//coord = UV;
	coord *= cloudscale;
    coord -= q - time;
    weight = 0.7;
    for (int i=0; i<8; i++){
		f += weight*noise( coord );
        coord = m*coord + time;
		weight *= 0.6;
    }
    
    f *= r + f;
    
    //noise colour
    float c = 0.0;
    time = TIME * speed * 2.0;
	//coord = UV;
    //uv = p*vec2(res.x/res.y,1.0);
	coord *= cloudscale*0.5;
    coord -= q - time;
    weight = 0.4;
    for (int i=0; i<7; i++){
		c += weight*noise( coord );
        coord = m*coord + time;
		weight *= 0.6;
    }
    
    //noise ridge colour
    float c1 = 0.0;
    time = TIME * speed * 3.0;
    //uv = p*vec2(res.x/res.y,1.0);
	coord = UV;
	coord *= cloudscale*3.0;
    coord -= q - time;
    weight = 0.4;
    for (int i=0; i<7; i++){
		c1 += abs(weight*noise( coord ));
        coord = m*coord + time;
		weight *= 0.6;
    }
	
    c += c1;
    
    //vec3 skycolour = mix(skycolour2, skycolour1, p.y);
    vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight*c), 0.0, 1.0);
   
    f = cloudcover + cloudalpha*f*r;
    
	//vec3 result = cloudcolour;
    vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));	
		
	ALBEDO.rgb = vec3(result);
	
	float a;
		
	//set alpha depending on value of albedo
	//if ((ALBEDO.r > sky.r) && (ALBEDO.g > sky.g) && (ALBEDO.b > sky.b))
	
	// set alpha depending on cloud_col
	//if ((cloud_col.r > 0.15) && (cloud_col.g > 0.0) && (cloud_col.b > 0.0))
	if (c+f > cut_off)
	//if (cloud_col.r > r_cut)
		a = 1.0;
	else
		a = 0.0;

	//cheapo tiling (better a line of pure empty sky than a seam)
	if (UV.x < 0.02) {
		a = 0.0;
	}
	
	if (UV.x > 5.185) { //experimental value for a scale of 6.
		a = 0.0;
	}


	ALPHA = a;
}
"

[resource]
render_priority = 0
shader = SubResource( "1" )
shader_param/cloudscale = 0.1
shader_param/speed = 0.001
shader_param/clouddark = 0.5
shader_param/cloudlight = 0.3
shader_param/cloudcover = 0.1
shader_param/cloudalpha = 8.0
shader_param/skytint = 0.5
shader_param/skycolour = Vector3(0.2, 0.4, 0.6)
shader_param/cut_off = 0.1
shader_param/m = Transform2D(1.6, -1.2, 1.2, 1.6, 0, 0)
